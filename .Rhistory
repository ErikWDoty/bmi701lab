hist(ex[, "Brip1"])
hist(ex[, "Brip1"], breaks=0.1)
dnorm(8.08, 1.54)
dnorm(8.08, 1.54)
hist(ex[ex$Brip1 > 0, "Brip1"])
supp = seq(-5, 5, 0.1)
plot(supp, dnorm(supp))
supp
plot(supp, dnorm(supp), type='l')
plot(supp, pnorm(supp), type='l')
plot(supp, dnorm(supp), type='l')
pnorm(supp)
pnorm()
pnorm(10, 0, 1) - pnorm(6, 0, 1)
pnorm(10, 8, 1) - pnorm(6, 8, 1)
ex
ex %>% filter(Brip1 > 0) %>% mean(Brip > 6 & Brip1 < 10)
library(dplyr)
ex %>% filter(Brip1 > 0) %>% mean(Brip > 6 & Brip1 < 10)
ex %>% filter(Brip1 > 0) %>% mean(Brip1 > 6 & Brip1 < 10)
ex %>% filter(Brip1 > 0) %$% mean(Brip1 > 6 & Brip1 < 10)
library(plyr)
ex %>% filter(Brip1 > 0) %$% mean(Brip1 > 6 & Brip1 < 10)
M = matrix(c(1, 4, 7, 2, 5, 8, 3, 6, 9), byrow=T)
M = matrix(c(1, 4, 7, 2, 5, 8, 3, 6, 9), byrow=T, nrow=3, ncol=3)
View(M)
N = matrix(c(1, 0, 0), byrow=T, nrow=3, ncol=1)
M %*% N
M %*% N2
N2 = matrix(c(0, 1, 0), byrow=T, nrow=3, ncol=1)
M %*% N2
N %*% M
N %*% M
N2 = matrix(c(0, 1, 0), byrow=T, nrow=3, ncol=1)
M %*% N2
N %*% M
t(N) %*% M
rnorm(100)
v1 <- rnorm(100)
v2 <- rnorm(100, 3, 1)
v3 <- rnorm(100, 3, 5)
qplot(v1)
library(ggplot2)
qplot(v1)
par(mfrow=c(1, 3))
qplot(v1)
hist(v1)
hist(v1); hist(v2); hist(v3)
library(ggplot2)
par(mfrow=c(1, 3))
hist(v1); hist(v2); hist(v3)
boxplot(v1)
boxplot(v1); boxplot(v3); boxplot(v3)
par(mfrow=c(1, 3))
boxplot(v1); boxplot(v2); boxplot(v3)
iris
nrow(iris)
str(iris)
table(iris)
colnames(iris)
table(iris[iris$Sepal.Length < 5, ])
table(iris$Sepal.Length < 5)
table(iris$Sepal.Length <= 5)
is1_1e5 = ifelse(iris$Sepal.Length <= 5, 1, 0)
mean(is1_1e5)
is5 = ifelse(iris$Sepal.Length < 5, 1, 0)
mean(is5)
mean(is1_1e5)
mean(!is1_1e5)
mean(is1_1e5) + mean(!is1_1e5)
is1_1e5
mean(is1_1e5 == `) + mean(!is1_1e5)
mean(is1_1e5 == 1) + mean(!is1_1e5 == 0)
mean(is1_1e5 == 1) + mean(!is1_1e5 == 0)
is1_1e5 == 1
mean(is1_1e5 == 1) + mean(is1_1e5 == 0)
```{r}
mean(is1_1e5 == 1) + mean(is1_1e5 == 0)
```
ip1_1e5 = ifelse(iris$Petal.Length <= 5, 1, 0)
a_b = ifelse(iris$Sepal.Length <=5 & iris$Petal.Length <= 5, 1, 0)
mean(a_b)
mean(is1_1e5) * mean(ip1_1e5)
pnorm()
pnorm(63, 54, 4.5)
1 - pnorm(50, 54, 4.5)
library(readxl)
exmat = getOtoExprs()
library(BMI713pack)
library(readxl)
exmat = getOtoExprs()
library(BMI713pack)
exmat = getOtoExprs()
View(ex)
sort(apply(exmat,2,max))[1:10]
library(BMI713pack)
library(readxl)
exmat = getOtoExprs()
sort(apply(exmat, 2, max))[1:10]
apply(exmat, 2, max)
apply(exmat, 2, max) < 5
table(apply(exmat, 2, max) < 5)
match("Actb", exmat)
match("Actb", exmat)
?match
match("Actb")
match("Actb", exmat)
match("Gapdh", exmat)
match("Pax6", exmat)
match("Actb", colnames(exmat))
match("Gapdh", colnames(exmat))
match("Egfp", colnames(exmat))
match("Pax6", colnames(exmat))
plot(exmat[exmat$Sox10])
plot(exmat[exmat$Sox10])
plot(exmat[exmat$Sox10])
plot(exmat[exmat$Sox10])
```
plot(exmat[exmat$Sox10])
plot(exmat[exmat$Sox10, ])
nsd = getNdSox()
dim(nsd)
inde = 1 * (nsd$Neurod1 > 0)
inde
inde = 1 * (nsd$Neurod1 > 0)
inde2 = 1 * (nsd$Sox10 > 0)
inde3 = 1 * (nsd$Neurod1 > 0 & nsd$Sox10 > 0)
mean(inde)
mean(inde2)
mean(inde3)
(a <- matrix(0, nrow=4, ncol=4))
?hist
v <- data.frame(v1=v1, v2=v2, v3=v3)
v <- data.frame(v1=v1, v2=v2, v3=v3)
boxplot(v)
(63 - 54) / 4.5
pnorm(63, 54, 4.5)
1 - pnorm(50, 54, 4.5)
exmat[exmat$Sox10, ]
plot(exmat$Neurod1)
library(gridExtra)
qplot(v1)
library(ggplot2)
qplot(v1)
grid.arrange(qplot(v1), qplot(v2), qplot(v3), ncol=3)
v <- data.frame(v1=v1, v2=v2, v3=v3)
p <- ggplot(v)
p + geom_boxplot()
v <- data.frame(v1=v1, v2=v2, v3=v3)
boxplot(v)
e = data.frame(gene='Neurod1', value=exmat$Neurod1)
e1 = data.frame(gene='Neurod1', value=exmat$Neurod1)
e2 = data.frame(gene='Sox10', value=exmat$Sox10)
e = rbind(e1, e2)
plot(e)
p = ggplot(e, aes(gene, value))
p + geom_point(aes(colors=gene))
plot(exmat$Neurod1)
plot(exmat$Sox10)
plot(exmat$Neurod1)
plot(exmat$Sox10)
nsd = getNdSox()
dim(nsd)
plot(exmat$Neurod1, col=1)
points(exmat$Sox10, col=2)
table(exmat$Neurod1 == 0)
plot(exmat$Neurod1, col=1)
points(exmat$Sox10, col=2)
plot(exmat$Neurod1, col=1)
points(exmat$Sox10, col=2)
plot(exmat$Neurod1, col=1)
points(exmat$Sox10, col=2)
suppressMessages(library(BMI713pack))
pnorm(1)
pnorm(1.96 )
qnorm(0.97)
qnorm(0.975)
?dnorm
?dbinom
?dpois
rpois(100)
X <- rnorm(100, 3, 2)
plot(X)
hist(X)
X <- rnorm(100000, 3, 2)
plot(X)
hist(X)
hist(X, freq=F)
lines(seq(-5, 5), dnorm(seq(-5, 5), 0, 1))
lines(seq(-5, 10), dnorm(seq(-5, 10), 3, 2), col="red", lty=2)
sum(x * dbinom(x, 8, 0.5))
x = 0:8
sum(x * dbinom(x, 8, 0.5))
X <- runif(10000)
hist(X)
hist(X, freq=F)
dunif(c(0.2, 0.3))
punif(0.5)
s = seq(-1, 1, 0.1)
plot(s, punif(0.5))
plot(s, punif(s))
s = seq(0, 1, 0.1)
plot(s, punif(s))
?dunif
X = runif(10000, 5, 10)
mean(X)
runif(100, 5, 10)
S = 0:8
px = dbinom(S, 8, 0.25)
sum(S * px)
S * px
X = rpois(5000, 2)
Y = 1 * (X == 2)
mean(Y)
dpois(2, 2)
Y = 1 * (X > 5)
mean(Y)
dpois(5, 5)
dpois(6, 2)
dpois(5, 2)
dpois(7, 2)
dpois(6, 2)
sum(dpois(6:100, 2))
samp2 = rpois(300, 3)
W = 1 * (samp2 >= 3)
V = 1 * (samp2 == 4)
mean(1 * (samp2 >= 3 & samp2 ==4))
W
V
mean(W)
mean(V)
mean(W & V)
mean(W & V) / mean(W)
Y = rpois(100, 4)
X = rpois(100, 3)
qqplot(X, Y)
abline(0, 1)
library(BMI713pack)
X = c(rep(0, 50), rnorm(30), rnorm(30, 2))
qqnorm(X)
qqnorm(X, cex=2, pch=19)
qqnorm(X[X>0], cex=2, pch=19)
qqnorm(X[X<0], cex=2, pch=19)
v <- c(1, 2, 3, 4, 5, 6, 7)
length(v) % 2
length(v) % 2
length(v) %% 2
length(v) %% 3
length(v) %% 4
v <- c(7, 4, 5, 2, 3, 6, 1)
v <- sort(v)
v[length(v) / 2]
length(v) / 2 + 1
round(4.5)
length(v) / 2
mymed <- function(v) {
v <- sort(v)
if length(v) %% 2 == 0 {
m <- 1/2 * (v[round(length(v) / 2)] + v[round(length(v) / 2) + 1])
} else {
m <- v[round(length(v) / 2)]
}
return(m)
}
mymed <- function(v) {
v <- sort(v)
if (length(v) %% 2 == 0) {
m <- 1/2 * (v[round(length(v) / 2)] + v[round(length(v) / 2) + 1])
} else {
m <- v[round(length(v) / 2)]
}
return(m)
}
mymed(c(1, 2, 4, 5, 7, 3, 6))
v[round(length(v) / 2)]
v[round(length(v) / 2) + 1]
length(v)
length(v) / 2)
length(v) / 2
round(length(v) / 2)
v <- c(7, 4, 5, 2, 3, 6, 1)
v <- sort(v)
length(v) %% 2 == 0
v[round(length(v) / 2)]
round(length(v) / 2)
length(v) / 2
round(length(v) / 2)
round(3.5)
ceil(3.5)
ceiling(3.5)
mymed <- function(v) {
v <- sort(v)
if (length(v) %% 2 == 0) {
m <- 1/2 * (v[floor(length(v) / 2)] + v[ceiling(length(v) / 2)])
} else {
m <- v[floor(length(v) / 2)]
}
return(m)
}
v <- c(7, 4, 5, 2, 3, 6, 1)
mymed(v)
v[floor(length(v) / 2)]
v <- c(7, 4, 5, 2, 3, 6, 1)
v <- sort(v)
v
v[floor(length(v) / 2)]
floor(length(v) / 2)
length(v) / 2
v <- c(7, 4, 5, 2, 3, 6, 1)
mymed <- function(v) {
v <- sort(v)
if (length(v) %% 2 == 0) {
m <- 1/2 * (v[floor(length(v) / 2)] + v[ceiling(length(v) / 2)])
} else {
m <- v[floor(length(v) / 2) + 1]
}
return(m)
}
mymed(v)
v <- c(1, 6, 9)
mymed(v)
v <- c(1, 6, 9, 10)
mymed(v)
v <- sort(v)
length(v) %% 2 == 0
v[floor(length(v) / 2)]
v[ceiling(length(v) / 2)]
ceiling(length(v) / 2)
length(v) / 2
v <- c(7, 4, 5, 2, 3, 6, 1)
mymed <- function(v) {
v <- sort(v)
if (length(v) %% 2 == 0) {
m <- 1/2 * (v[length(v) / 2] + v[length(v) / 2 + 1])
} else {
m <- v[floor(length(v) / 2) + 1]
}
return(m)
}
v <- c(1, 6, 9, 10)
mymed(v)
medianChecker = function(f=median, x) {
sum(x >= f(x)) == sum(x <= f(x))
}
medianChecker(mymed, x)
fmed = function(x) {
optimize(function(z) sum(abs(z-x)), range(x))$minimum
}
medianChecker(fmed, x)
myst = function(ivec) {
nu = length(unique(ivec))
ans = rep(0, length(unique(ivec))) names(ans) = sort(unique(ivec))
ac = as.character
for (j in ivec) ans[ac(j)] = ans[ac(j)] + 1 ans[ans > 0]
}
# List of packages for session
.packages <- c("ggplot2", "RMySQL")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
lapply(.packages, library, character.only=TRUE)
# setup working directory
setwd("~/git/bmi701lab/")
3 + 4
2^5
exp(log(4^3))
x <- 4 * 9
y <- c("Harvard", "MIT", "Beaver")
x
y
is.complex(3)
as.complex(3)
NA
is.na(NA)
na.omit(c(NA, "Zak", 5))
c(1, 2, 3)
c(1:10)
c(1, 2, "a", "b")
y[1]
y
tolower(y)
toupper(y)
paste(y, "Adam")
paste("Adam", "Wright", sep="+")
paste("BMI", 701:705, sep=".", collapse="|")
paste0("Adam", "Wright")
strsplit("Adam is cool", " ")
x <- c(1, 2, 2, 6, 7, 6, 2, 5, 3)
factor(x)
matrix(c(1:25), nrow=5, ncol=5, byrow=FALSE)
df <- data.frame(iris)
View(df)
str(iris)
head(iris)
summary(iris)
?summary
# create your function
f <- function(x) {
sum <- 0
if (x == 1 | x == 2) {
sum <- 1
} else {
sum <- f(x-1) + f (x-2)
}
return(sum)
}
for (i in 1:10) print(f(i))
library(caret)
model <- train(Species ~ ., iris, method = "svmLinear")
pred <- predict(model, iris)
model <- train(Species ~ ., iris, method = "svmLinear")
pred <- predict(model, iris)
confusionMatrix(iris$Species, pred)
library(RMySQL)
con <- dbConnect(MySQL(), user="root", password="",
dbname="gwas", host="localhost") # 127.0.0.1
dbListTables(con)
dbGetQuery(con, "select * from gwas")
gwas <- dbGetQuery(con, "select * from gwas")
View(gwas)
gwas <- dbGetQuery(con, "select * from gwas limit 100")
View(gwas)
cons <- dbListConnections(MySQL())
cons
for (con in cons) {dbDisconnect(con)}
biocLite("annotate")
biocLite("hugene10sttranscriptcluster.db")
library(annotate)
library(hugene10sttranscriptcluster.db)
source("https://bioconductor.org/biocLite.R")
biocLite("annotate")
entrezID <- as.character(rownames(eSet))
install.packages("XML", repos="http://cran.us.r-project.org")
install.packages("rentrez", repos="http://cran.us.r-project.org")
install.packages("XML", repos = "http://cran.us.r-project.org")
#https://www.bioconductor.org/packages/release/data/annotation/manuals/hugene10sttranscriptcluster.db/man/hugene10sttranscriptcluster.db.pdf
source("https://bioconductor.org/biocLite.R")
biocLite("annotate")
entrezID <- as.character(rownames(eSet))
geneCode <- as.character(lookUp(entrezID, "hugene10sttranscriptcluster.db", "GENCODE"))
geneName <- as.character(lookUp(entrezID, "hugene10sttranscriptcluster.db", "GENENAME"))
acc_name <- data.frame(gene_acc=entrezID, gene_code=geneCode, gene_name=geneName)
acc_name
library(XML)
library(rentrez)
library(matrixStats)
library(ggplot2)
entrez_dbs()
entrez_db_searchable('clinvar')
geneID <- 4160
all_the_links <- entrez_link(dbfrom='gene', id=geneid, db='all')
all_the_links$links
clinvar <- all_the_links$links$gene_clinvar
for(i in 1:length(clinvar)) {
variantdec <- paste(clinvar[i],'[UID]',sep='')
variant <- entrez_search(db="clinvar",term=variantdec,retmax='10')
summary <- entrez_summary(db="clinvar", id=clinvar[i])
all_recs <- entrez_fetch(db="clinvar", id=clinvar[i], rettype='variation')
print(all_recs)
}
fname <- "https://raw.githubusercontent.com/hms-dbmi/BMI-703/master/data/assignment1/p1.expression.csv"
eSet <- read.table(fname, sep=',', header=TRUE)
rownames(eSet) <- eSet$X
eSet$X <- NULL
head(eSet)
exprMean <- rowMeans(eSet)
exprSd <- apply(eSet, 1, sd, na.rm=TRUE)
all_the_links <- entrez_link(dbfrom='gene', id=geneID, db='all')
all_the_links$links
clinvar <- all_the_links$links$gene_clinvar
for(i in 1:length(clinvar)) {
variantdec <- paste(clinvar[i],'[UID]',sep='')
variant <- entrez_search(db="clinvar",term=variantdec,retmax='10')
summary <- entrez_summary(db="clinvar", id=clinvar[i])
all_recs <- entrez_fetch(db="clinvar", id=clinvar[i], rettype='variation')
print(all_recs)
}
fname <- "https://raw.githubusercontent.com/hms-dbmi/BMI-703/master/data/assignment1/p1.expression.csv"
eSet <- read.table(fname, sep=',', header=TRUE)
rownames(eSet) <- eSet$X
eSet$X <- NULL
head(eSet)
exprMean <- rowMeans(eSet)
exprSd <- apply(eSet, 1, sd, na.rm=TRUE)
qplot(exprMean, geom="histogram")
qplot(exprSd, geom="histogram")
#https://www.bioconductor.org/packages/release/data/annotation/manuals/hugene10sttranscriptcluster.db/man/hugene10sttranscriptcluster.db.pdf
source("https://bioconductor.org/biocLite.R")
biocLite("annotate")
library(annotate)
library(hugene10sttranscriptcluster.db)
biocLite("hugene10sttranscriptcluster.db")
library(annotate)
library(hugene10sttranscriptcluster.db)
entrezID <- as.character(rownames(eSet))
entrezID
geneCode <- as.character(lookUp(entrezID, "hugene10sttranscriptcluster.db", "GENCODE"))
geneName <- as.character(lookUp(entrezID, "hugene10sttranscriptcluster.db", "GENENAME"))
geneCode
geneName
geneCode <- as.character(lookUp(entrezID, "hugene10sttranscriptcluster.db", "SYMBOL"))
geneCode
geneName
acc_name <- data.frame(gene_acc=entrezID, gene_code=geneCode, gene_name=geneName)
acc_name
View(acc_name)
hugene10sttranscriptclusterGO2PROBE()
hugene10sttranscriptclusterGO2PROBE
xx <- as.list(hugene10sttranscriptclusterGO2PROBE)
xx
xx$`GO:0000002`
