}
dimnames(mat) = list(c("yes", "no"), c("NND", "alive"), names(x))
compressed <- matrix(c(sum(mat[1, 1, ]),  sum(mat[2, 1, ]),  sum(mat[1, 2, ]),  sum(mat[2, 2, ])), 2)
rownames(compressed) <- c("monitored", "nonmonitored")
colnames(compressed) <- c("NND", "alive")
compressed
(OR <- (compressed[1, 1]*compressed[2, 2]) / (compressed[1, 2]*compressed[2, 1]))
apply(mat, 3, function(x) fisher.test(x)$estimate)
View(compressed)
mat
View(neutra)
apply(mat, 3, function(x) fisher.test(x)$estimate)
View(neutra)
(OR <- (compressed[1, 1]*compressed[2, 2]) / (compressed[1, 2]*compressed[2, 1]))
mantelhaen.test(mat)
library(epiR)
epi.2by2(mat[, , 1:12])
```
mantelhaen.test(mat)
apply(mat, 3, function(x) fisher.test(x)$estimate)
library(mvtnorm)
pmvnorm(lower=-Inf, upper=c(-2, -2), mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2))
set.seed(1234)
X = rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2))
mean(X[, 1] < -2 & X[, 2] < -2)
set.seed(1234)
X = rmvnorm(10000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2))
mean(X[, 1] < -2 & X[, 2] < -2)
set.seed(1234)
X = rmvnorm(100000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2))
mean(X[, 1] < -2 & X[, 2] < -2)
aline <- read.csv("~/Downloads/aline-dataset.csv")
require("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv)
dbExecute(con, "SET search_path TO mimiciii")
drv <- dbDriver("PostgreSQL")
require("RPostgreSQL")
con <- dbConnect(dbDriver("PostgreSQL"), dbname = "mimic",
host = "127.0.0.1", port = 5432,
user = "weng", password = "0367")
dbExecute(con, "SET search_path TO mimiciii")
dbExistsTable(con, "patients")
dbGetQuery(con, "SELECT count(1) FROM patients")
hist(aline$icu_los_day,main="Length of Stay in ICU",xlab="Length of Stay in ICU",col="grey")
hist(aline$icu_los_day, breaks = 100, main="Length of Stay in ICU",xlab="Length of Stay in ICU",col="grey")
```
hist(log(aline$icu_los_day),main="Length of Stay in ICU",xlab="Length of Stay in ICU",col="grey")
hist(as.numeric(los_mins/3600),main="Length of Stay in ICU",xlab="Length of Stay in ICU",col="grey", breaks=100)
demo.admissions <- dbReadTable(con, "admissions")
los_mins <- demo.admissions$dischtime - demo.admissions$admittime
hist(as.numeric(los_mins/3600),main="Length of Stay in ICU",xlab="Length of Stay in ICU",col="grey", breaks=100)
plot(density(aline$icu_los_day),main="LOS ICU, bw=default",xlab="LOS ICU",ylab="Density Estimate")
plot(density(aline$icu_los_day,bw=2),main="LOS ICU, bw=2",xlab="LOS ICU",ylab="Density Estimate")
plot(density(aline$icu_los_day),main="LOS ICU, bw=default",xlab="LOS ICU",ylab="Density Estimate")
str(demo.admissions)
str(aline)
hist(aline$sofa_first, main="First SOFA", xlab="Length of Stay in ICU",col="grey")
hist(aline$sofa_first, main="First SOFA", xlab="SOFA score", col="blue")
hist(aline$sofa_first, main="First SOFA", xlab="SOFA score", col="blue", breaks=3)
hist(aline$sofa_first, main="First SOFA", xlab="SOFA score", col="blue", breaks=30)
hist(aline$aline_flg, main="First SOFA", xlab="SOFA score", col="blue")
hist(aline$aline_flg, main="aline_flg", xlab="aline_flg", col="blue")
hist(density(aline$sofa_first, bw=0.1), main="First SOFA", xlab="SOFA score", col="blue")
plot(density(aline$sofa_first, bw=0.1), main="First SOFA", xlab="SOFA score", col="blue")
plot(density(aline$sofa_first, bw=2), main="First SOFA", xlab="SOFA score", col="blue")
plot(aline$sodium_first, aline$creatinine_first, pch=20, xlab="First Sodium", ylab="First Creatinine")
plot(aline$sodium_first, aline$creatinine_first, pch=20, col=as.factor(aline$renal_flg))
plot(aline$sofa_first, aline$age, pch=20, xlab="SOFA", ylab="Age")
plot(aline$sofa_first, aline$age, pch=20, xlab="SOFA", ylab="Age", col=as.factor(aline$hosp_exp_flg))
plot(aline$sofa_first, aline$age[aline$age < 100], pch=20, xlab="SOFA", ylab="Age")
plot(aline$sofa_first[aline$age < 100], aline$age[aline$age < 100], pch=20, xlab="SOFA", ylab="Age")
plot(aline$sofa_first[aline$age < 100], aline$age[aline$age < 100],
pch=20, xlab="SOFA", ylab="Age")
plot(aline$sofa_first[aline$age < 100], aline$age[aline$age < 100],
pch=20, xlab="SOFA", ylab="Age", col=as.factor(aline$hosp_exp_flg))
plot(aline$sofa_first[aline$age < 100], aline$age[aline$age < 100],
pch=20, xlab="SOFA", ylab="Age", col=as.factor(aline$hosp_exp_flg))
```
plot(jitter(aline$sofa_first[aline$age < 100]), jitter(aline$age[aline$age < 100]),
pch=20, xlab="SOFA", ylab="Age", col=as.factor(aline$hosp_exp_flg))
plot(jitter(aline$sofa_first[aline$age < 100]), jitter(aline$age[aline$age < 100]), ylim=c(16,90),
pch=20, xlab="SOFA", ylab="Age", col=as.factor(aline$hosp_exp_flg))
boxplot(creatinine_first~renal_flg, data=aline, ylab="First Creatinine", xlab="Renal Disease")
boxplot(map_first ~ service_unit, data=aline, cex.axis=0.6,ylab="MAP", xlab="Service Unit")
boxplot(sofa_first~hosp_exp_flg, data=aline, ylab="SOFA", xlab="Hospital expired flag")
boxplot(jitter(sofa_first)~hosp_exp_flg, data=aline, ylab="SOFA", xlab="Hospital expired flag")
interaction.plot(aline$pneumonia_flg,aline$ards_flg,aline$temp_first,fun = function(x) mean(x, na.rm = TRUE))
interaction.plot(aline$copd_flg,aline$service_unit,aline$map_first,fun = function(x) mean(x, na.rm = TRUE))
interaction.plot(aline$chf_flg,aline$renal_flg,aline$creatinine_first,fun = function(x) mean(x, na.rm = TRUE))
interaction.plot(aline$chf_flg,aline$renal_flg,aline$creatinine_first,fun = function(x) median(x, na.rm = TRUE))
x <- seq(0, 10, 0.01)
plot(x, dnorm(x, 3, 1), type="l")   # mean = 3
lines(x, dnorm(x, 7, 1), col="red") # mean = 7
x <- seq(0, 10, 0.01)
plot(x, dnorm(x, 3, 1), type="l")   # mean = 3
lines(x, dnorm(x, 7, 1), col="red") # mean = 7
head(aline)
class(aline)
sapply(aline, class)
as.numeric(c("7", "7*", "7.0", "7,0"))
hist(aline$hgb_first,40)
summary(aline$hgb_first)
summary(aline$map_first)
hist(aline$map_first,40)
boxplot(aline$map_first)
boxplot.stats(aline$map_first)$out
sum(aline$map_first<0, na.rm=TRUE)
sum(aline$map_first>250, na.rm=TRUE)
hist(aline$platelet_first,40)
hist(aline$creatinine_first, 40
hist(aline$creatinine_first, 40)
hist(aline$creatinine_first, 40)
plot(aline[, 25:28])
boxplot.stats(aline$temp_first)$out
boxplot.stats(aline$hgb_first)$out
boxplot.stats(aline$sodium_first)$out
boxplot.stats(aline$chloride_first)$out
library(data.table) #run the new package
outlierReplace = function(dataframe, cols, rows, newValue = NA) {
if (any(rows)) set(dataframe, rows, cols, newValue)
}
par(mfrow = c(1, 2))  #2 plots on 1 page
map_save<-aline$map_first #save the variable with outliers
outlierReplace(aline,"map_first",which(aline$map_first<0),NA)
outlierReplace(aline,"map_first",which(aline$map_first>200),NA)
hist(map_save,20,main="Before deleting outliers")
hist(aline.dataset$map_first,20,main="After deleting outliers")
hist(aline$map_first,20,main="After deleting outliers")
par(mfrow = c(1, 2))  #2 plots on 1 page
map_save<-aline$map_first #save the variable with outliers
aline$map_first
aline <- read.csv("~/Downloads/aline-dataset.csv")
par(mfrow = c(1, 2))  #2 plots on 1 page
map_save<-aline$map_first #save the variable with outliers
outlierReplace(aline,"map_first",which(aline$map_first<0),NA)
outlierReplace(aline,"map_first",which(aline$map_first>200),NA)
hist(map_save,20,main="Before deleting outliers")
hist(aline$map_first,20,main="After deleting outliers")
par(mfrow = c(1, 2))  #2 plots on 1 page
aline <- read.csv("~/Downloads/aline-dataset.csv")
par(mfrow = c(1, 2))  #2 plots on 1 page
map_save<-aline$map_first #save the variable with outliers
hist(map_save,20,main="Before deleting outliers")
outlierReplace(aline,"map_first",which(aline$map_first<0),NA)
outlierReplace(aline,"map_first",which(aline$map_first>200),NA)
hist(aline$map_first,20,main="After deleting outliers")
outlierReplace(aline,"hgb_first",which(aline$hgb_first<3),NA)
outlierReplace(aline,"sodium_first",which(aline$sodium_first<100),NA)
hist(aline$hgb_first,20,main="After deleting outliers")
hist(aline$sodium_first,20,main="After deleting outliers")
library(mice) #runs the new package
install.packages("mice")
library(mice) #runs the new package
md.pattern(aline[,30:33])
colna <- colSums(is.na(aline))/nrow(aline)
colna
barplot(colna,main="Proportion of missingness",ylab="Freqency",xlab="Variable",las=2)  #las=2 to display labels vertically
par(nfrow = c(1, 1))
colna <- colSums(is.na(aline))/nrow(aline)
barplot(colna,main="Proportion of missingness",ylab="Freqency",xlab="Variable",las=2)  #las=2 to display labels vertically
par(mfrow = c(1, 1))
colna <- colSums(is.na(aline))/nrow(aline)
barplot(colna,main="Proportion of missingness",ylab="Freqency",xlab="Variable",las=2)  #las=2 to display labels vertically
sum(complete.cases(aline))
which(complete.cases(aline))
x<-colSums(is.na(aline))>(nrow(aline)/2)
which(x)
aline[c(20,21,22,29)] <- list(NULL)
tbl=table(aline.dataset$aline_flg,is.na(aline.dataset$hgb_first))
tbl=table(aline$aline_flg,is.na(aline$hgb_first))
tbl
splitaline<-split(aline, aline$aline_flg)
noaline<-splitaline[[1]]
aline<-splitaline[[2]]
mean(is.na(aline$hgb_first))   #proportion of missing values in hgb_first in patients with aline
mean(is.na(noaline$hgb_first))  #proportion of missing values in hgb_first in patients without aline
chisq.test(tbl)
map1<-aline$map_first
par(mfrow = c(1, 2))  #2 plots on 1 page
hist(map1,20,main="Original distribution")
map1[is.na(map1)] <- mean(map1, na.rm = TRUE)
hist(map1,20,main="After mean imputation")
```
x<-aline[,22:25] #subset of interest (as an example)
if(!("VIM" %in% installed.packages()[,1])) {
install.packages("VIM")
}
library(VIM) #runs the new package
x2<-kNN(x)
x2<-x2[,1:4]  #kNN build some extra columns. Here we simply keep the first 4 columns.
md.pattern(x)  #before kNN imputation
md.pattern(x2)  #before kNN imputation
x2
x
x2
x1
x
x2
x2<-kNN(x)
x2
x2<-x2[,1:4]  #kNN build some extra columns. Here we simply keep the first 4 columns.
md.pattern(x)  #before kNN imputation
md.pattern(x2)  #before kNN imputation
hist(x,20,main="Original distribution")
,
hist(x$map_first,20,main="Original distribution")
hist(x2$map_first,20,main="Original distribution")
suppressMessages(library(VariantAnnotation))
# Convert gene symbols to gene ids
#biocLite("org.Hs.eg.db")
library(org.Hs.eg.db)
genesym <- c('SCN1A', 'SCN2A', 'SCN3A', 'SCN4A', 'SCN5A', 'SCN8A', 'SCN9A',
'SCN10A', 'SCN11A', 'SCN7A', 'NGLY1', 'AAAS', 'GMPPA')
geneid <- select(org.Hs.eg.db, keys=genesym, keytype="SYMBOL", columns="ENTREZID")
geneid
# Create gene ranges
# load annotation package
#biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- renameSeqlevels(txdb, gsub("chr", "", seqlevels(txdb)))
#txdbgene <- keepSeqlevels(txdb, c("2","18"))
# create list of transcripts
txbygene <- transcriptsBy(txdb, "gene")
# create gene ranges
gnrng <- unlist(range(txbygene[geneid$ENTREZID]), use.names=FALSE)
names(gnrng) <- geneid$SYMBOL
# Extract variant subsets
param <- ScanVcfParam(which = gnrng, info = "DP", geno = c("GT", "AD", "GQ", "PL"))
setwd("~/Downloads/")
van2554 <- readVcf("van2554.analysisReady.annotated.vcf.gz", "hg19", param)
van2555 <- readVcf("van2555.analysisReady.annotated.vcf.gz", "hg19", param)
van2556 <- readVcf("van2556.analysisReady.annotated.vcf.gz", "hg19", param)
## Inspect the VCF object with the 'fixed', 'info' and 'geno' accessors
#biocLite("BSgenome.Hsapiens.UCSC.hg19") # reference alleles
library(BSgenome.Hsapiens.UCSC.hg19)
seqlevelsStyle(van2554) <- "UCSC"
seqlevelsStyle(van2555) <- "UCSC"
seqlevelsStyle(van2556) <- "UCSC"
seqlevelsStyle(txdb) <- "UCSC"
aa2554 <- predictCoding(van2554, txdb, Hsapiens)
aa2555 <- predictCoding(van2555, txdb, Hsapiens)
aa2556 <- predictCoding(van2556, txdb, Hsapiens)
mcols(aa2554)$GENEID
mcols(aa2554)$ranges
mcols(aa2554)$NAMES
str(aa2554)
aa2554
rowname(aa2554)
rownames(aa2554)
colnames(aa2554)
aa2554@ranges
aa2554@metadata
aa2554@seqinfo
aa2554@elementMetadata
aa2554@strand
aa2554@ranges
names(aa2554)
setdiff(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556)))
)
intersect(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556))))
(denovo <- setdiff(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556)))))
(inherited <- intersect(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556)))))
denovo
aa2554$2`2:220370245_C/G`
aa2554$`2:220370245_C/G`
aa2554$`2:220370245_C/G`
aa2554['2:220370245_C/G']
aa2554['2:220370245_C/G']$`2:220370245_C/G`
aa2554['2:220370245_C/G']$GENEID
aa2554[denovo]$GENEID
aa2554[inherited]$GENEID
unique(aa2554[inherited]$GENEID)
(inherited <- intersect(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556)))))
unique(c(names(aa2555), names(aa2556)))))
aa2554[denovo]$GENEID
unique(c(names(aa2555), names(aa2556)))))
aa2554[denovo]$GENEID
unique(c(names(aa2555), names(aa2556)))
unique(names(aa2554))
intersect(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556))))
aa2554[denovo]$GENEID
unique(names(aa2554))
# inherited
(denovo <- setdiff(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556)))))
aa2554['12:52115363_T/C']
(inherited <- intersect(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556)))))
aa2554['rs78391141']
intersect(unique(names(aa2554)), unique(c(names(aa2555), names(aa2556))))
aa2554
aa2554[aa2554$CONSEQUENCE=="nonsynonymous"]
kid <- aa2554[aa2554$CONSEQUENCE=="nonsynonymous"]
mom <- aa2555[aa2555$CONSEQUENCE=="nonsynonymous"]
dad <- aa2556[aa2556$CONSEQUENCE=="nonsynonymous"]
(denovo <- setdiff(unique(names(kid)), unique(c(names(mom), names(dad)))))
inherited
(inherited <- intersect(unique(names(kid)), unique(c(names(mom), names(dad)))))
kid[denovo]$GENEID
unique(kid[inherited]$GENEID)
x_binom <- rbinom(1000)
x_binom <- rbinom(1000, 1000)
x_binom <- rbinom(1000, 1000, 1/1000)
x_binom
x_binom <- rbinom(1000, 1000, 1/1000)
y_binom <- rbinom(1000, 1000, 1/1000)
neutra <- read.csv("~/Dropbox/2016_bmi713/assignment/neutra5dim.csv", stringsAsFactors=FALSE)
neutra$agecat[24] <- "28-31"
x <- split(neutra, list(neutra$agecat, neutra$servclass, neutra$comprisk))
mat <- array(0, dim=c(2, 2, 12))
for (i in 1:12) {
mat[, , i] <- matrix(c(x[[i]]$NND, x[[i]]$alive), 2)
tmp <- mat[1, , i]
mat[1, , i] <- mat[2, , i]
mat[2, , i] <- tmp
}
dimnames(mat) = list(c("yes", "no"), c("NND", "alive"), names(x))
compressed <- matrix(c(sum(mat[1, 1, ]),  sum(mat[2, 1, ]),  sum(mat[1, 2, ]),  sum(mat[2, 2, ])), 2)
rownames(compressed) <- c("monitored", "nonmonitored")
colnames(compressed) <- c("NND", "alive")
compressed
(OR <- (compressed[1, 1]*compressed[2, 2]) / (compressed[1, 2]*compressed[2, 1]))
apply(mat, 3, function(x) fisher.test(x)$estimate)
mantelhaen.test(mat)
epi.2by2(mat)
View(neutra)
View(compressed)
mat
rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2))
sum(rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2)) < c(-2, -2))
library(mvtnorm)
pmvnorm(lower=-Inf, upper=c(-2, -2), mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2))
binom.test(sum(rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2)) < c(-2, -2)), 1000, 0.009825103)
?binom.test
binom.test(sum(rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2)) < c(-2, -2)), 1000, 0.009825103)
binom.test(sum(rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2)) < c(-2, -2)), 1000, 0.009825103)
set.seed(1234)
binom.test(sum(rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2)) < c(-2, -2)), 1000, 0.009825103)
set.seed(1234)
X = rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2))
X
binom.test(sum(rmvnorm(X) < c(-2, -2)), 1000, 0.009825103)
set.seed(1234)
X = rmvnorm(1000, mean=c(0, 0), sigma=matrix(c(1, 0.8, 0.8, 1), 2))
rmvnorm(X)
binom.test(sum(X < c(-2, -2)), 1000, 0.009825103)
neutra <- read.csv("~/Dropbox/2016_bmi713/assignment/neutra5dim.csv", stringsAsFactors=FALSE)
neutra$agecat[24] <- "28-31"
x <- split(neutra, list(neutra$agecat, neutra$servclass, neutra$comprisk))
mat <- array(0, dim=c(2, 2, 12))
for (i in 1:12) {
mat[, , i] <- matrix(c(x[[i]]$NND, x[[i]]$alive), 2)
tmp <- mat[1, , i]
mat[1, , i] <- mat[2, , i]
mat[2, , i] <- tmp
}
dimnames(mat) = list(c("yes", "no"), c("NND", "alive"), names(x))
```
neutra <- read.csv("~/Dropbox/2016_bmi713/assignment/neutra5dim.csv", stringsAsFactors=FALSE)
neutra$agecat[24] <- "28-31"
x <- split(neutra, list(neutra$agecat, neutra$servclass, neutra$comprisk))
mat <- array(0, dim=c(2, 2, 12))
for (i in 1:12) {
mat[, , i] <- matrix(c(x[[i]]$NND, x[[i]]$alive), 2)
tmp <- mat[1, , i]
mat[1, , i] <- mat[2, , i]
mat[2, , i] <- tmp
}
dimnames(mat) = list(c("yes", "no"), c("NND", "alive"), names(x))
```
head(mat)
compressed <- matrix(c(sum(mat[1, 1, ]),  sum(mat[2, 1, ]),  sum(mat[1, 2, ]),  sum(mat[2, 2, ])), 2)
rownames(compressed) <- c("monitored", "nonmonitored")
colnames(compressed) <- c("NND", "alive")
compressed
(OR <- (compressed[1, 1]*compressed[2, 2]) / (compressed[1, 2]*compressed[2, 1]))
apply(mat, 3, function(x) fisher.test(x)$estimate)
mantelhaen.test(mat)
library(epiR)
epi.2by2(mat)
mantelhaen.test(mat)
# List of packages for session
.packages <- c("tm", "wordcloud")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
lapply(.packages, library, character.only=TRUE)
setwd("~/git/bmi701lab/")
# Locate and load the Corpus.
pos <- "lab05_pos"
pos
pos <- read.table("lab05_pos")
pos <- read.table("lab05_pos", sep="\t")
View(pos)
pos <- read.table("lab05_pos", sep="\n")
pos <- read.table("lab05_pos", sep=",")
pos <- read.table("lab05_pos", sep="\t")
pos <- read.table("lab05_pos", sep=".")
pos <- "lab05_pos"
pos <- file(description="lab05_pos", open="r")
ois
pos
for(i in 1:n) {
tmp <- scan(file=con, nlines=1, quiet=TRUE)
## do something on a line of data
}
n <- system(command=paste("wc -l ", file, " | awk '{ print $1 }'", sep=""), intern=TRUE)
n <- system(command=paste("wc -l lab05_pos | awk '{ print $1 }'", sep=""), intern=TRUE)
for (i in 1:n) tmp <- scan(file=con, nlines=1, quiet=TRUE)
pos <- file(description="lab05_pos", open="r")
cmd <- paste("wc -l lab05_pos | awk '{ print $1 }'", sep="")
for (i in 1:n) tmp <- scan(file=cmd, nlines=1, quiet=TRUE)
con <- file("lab05_pos", open='r')
text <- readLines(con)
text
text <- data.frame(readLines(con))
View(text)
pos <- readLines(con)
docs <- Corpus(DirSource(pos))
pos
con <- file("lab05_pos", open='r')
pos <- readLines(con)
docs <- Corpus(DirSource(pos))
strz9pos
str(pos)
list.files(path=".")
grepl("lab05", list.files(path=".", ))
list.files(path=".", )[grepl("lab05", list.files(path=".", ))]
fname <- list.files(path=".")[grepl("lab05", list.files(path="."))]
fname
con
pos
data.frame(sentence=pos)
fname <- list.files(path=".")[grepl("lab05", list.files(path="."))]
data <- data.frame()
for (i in 1:length(fname)) {
con <- file(fname[i], open='r')
tmp <- readLines(con)
tmp <- data.frame(sentence=tmp)
tmp$polarity <- i
data <- rbind(data, tmp)
}
View(data)
docs <- Corpus(DirSource(data))
docs <- Corpus(VectorSource(data))
docs
summary(docs)
inspect(docs[1])
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x)) docs <- tm_map(docs, toSpace, "/|@|\\|")
corpus <- Corpus(VectorSource(data$sentence))
corpus
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeWords, c(stopwords("english")))
corpus <- tm_map(corpus, stemDocument)
freq <- DocumentTermMatrix(corpus,
control=list(weighting=function(x) weightTfIdf(x, normalize=tfidfNorm),
stopwords=TRUE))
)
freq <- DocumentTermMatrix(corpus,
control=list(weighting=function(x) weightTfIdf(x, normalize=TRUE),
stopwords=TRUE))
freq <- data.frame(as.matrix(freq))
View(freq)
corpus
colnames(freq) <- make.names(colnames(freq))
rownames(freq) <- make.names(fileName, unique=T)
View(freq)
inspect(dtm[1:5, 1000:1005])
fname <- list.files(path=".")[grepl("lab05", list.files(path="."))]
data <- data.frame()
for (i in 1:length(fname)) {
con <- file(fname[i], open='r')
tmp <- readLines(con)
tmp <- data.frame(sentence=tmp)
tmp$polarity <- i
data <- rbind(data, tmp)
}
docs <- Corpus(VectorSource(data))
docs
summary(docs)
setwd("~/git/bmi701lab/")
# Read files
fname <- list.files(path=".")[grepl("lab05", list.files(path="."))]
data <- data.frame()
for (i in 1:length(fname)) {
con <- file(fname[i], open='r')
tmp <- readLines(con)
tmp <- data.frame(sentence=tmp)
tmp$polarity <- i
data <- rbind(data, tmp)
}
corpus <- Corpus(VectorSource(data$sentence))
corpus
summary(corpus)
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeWords, c(stopwords("english")))
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus,
control=list(weighting=function(x) weightTfIdf(x, normalize=TRUE),
stopwords=TRUE))
dtm <- DocumentTermMatrix(corpus)
dtm <- data.frame(as.matrix(dtm))
View(dtm)
